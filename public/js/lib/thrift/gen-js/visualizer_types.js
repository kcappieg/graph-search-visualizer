//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Thrift from "../thrift.js";

const Location = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field x is unset!');
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field y is unset!');
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

const Iteration = function(args) {
  this.agentLocation = null;
  this.clearPreviousEnvelope = null;
  this.newEnvelopeNodesCells = null;
  this.clearPreviousBackup = null;
  this.newBackedUpCells = null;
  this.projectedPath = null;
  if (args) {
    if (args.agentLocation !== undefined && args.agentLocation !== null) {
      this.agentLocation = new Location(args.agentLocation);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field agentLocation is unset!');
    }
    if (args.clearPreviousEnvelope !== undefined && args.clearPreviousEnvelope !== null) {
      this.clearPreviousEnvelope = args.clearPreviousEnvelope;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clearPreviousEnvelope is unset!');
    }
    if (args.newEnvelopeNodesCells !== undefined && args.newEnvelopeNodesCells !== null) {
      this.newEnvelopeNodesCells = Thrift.copyList(args.newEnvelopeNodesCells, [Location]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field newEnvelopeNodesCells is unset!');
    }
    if (args.clearPreviousBackup !== undefined && args.clearPreviousBackup !== null) {
      this.clearPreviousBackup = args.clearPreviousBackup;
    }
    if (args.newBackedUpCells !== undefined && args.newBackedUpCells !== null) {
      this.newBackedUpCells = Thrift.copyList(args.newBackedUpCells, [Location]);
    }
    if (args.projectedPath !== undefined && args.projectedPath !== null) {
      this.projectedPath = Thrift.copyList(args.projectedPath, [Location]);
    }
  }
};
Iteration.prototype = {};
Iteration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.agentLocation = new Location();
        this.agentLocation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.clearPreviousEnvelope = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.newEnvelopeNodesCells = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Location();
          elem6.read(input);
          this.newEnvelopeNodesCells.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.clearPreviousBackup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size7 = 0;
        var _rtmp311;
        this.newBackedUpCells = [];
        var _etype10 = 0;
        _rtmp311 = input.readSetBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new Location();
          elem13.read(input);
          this.newBackedUpCells.push(elem13);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size14 = 0;
        var _rtmp318;
        this.projectedPath = [];
        var _etype17 = 0;
        _rtmp318 = input.readSetBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new Location();
          elem20.read(input);
          this.projectedPath.push(elem20);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Iteration.prototype.write = function(output) {
  output.writeStructBegin('Iteration');
  if (this.agentLocation !== null && this.agentLocation !== undefined) {
    output.writeFieldBegin('agentLocation', Thrift.Type.STRUCT, 1);
    this.agentLocation.write(output);
    output.writeFieldEnd();
  }
  if (this.clearPreviousEnvelope !== null && this.clearPreviousEnvelope !== undefined) {
    output.writeFieldBegin('clearPreviousEnvelope', Thrift.Type.BOOL, 2);
    output.writeBool(this.clearPreviousEnvelope);
    output.writeFieldEnd();
  }
  if (this.newEnvelopeNodesCells !== null && this.newEnvelopeNodesCells !== undefined) {
    output.writeFieldBegin('newEnvelopeNodesCells', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRUCT, this.newEnvelopeNodesCells.length);
    for (var iter21 in this.newEnvelopeNodesCells)
    {
      if (this.newEnvelopeNodesCells.hasOwnProperty(iter21))
      {
        iter21 = this.newEnvelopeNodesCells[iter21];
        iter21.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.clearPreviousBackup !== null && this.clearPreviousBackup !== undefined) {
    output.writeFieldBegin('clearPreviousBackup', Thrift.Type.BOOL, 4);
    output.writeBool(this.clearPreviousBackup);
    output.writeFieldEnd();
  }
  if (this.newBackedUpCells !== null && this.newBackedUpCells !== undefined) {
    output.writeFieldBegin('newBackedUpCells', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRUCT, this.newBackedUpCells.length);
    for (var iter22 in this.newBackedUpCells)
    {
      if (this.newBackedUpCells.hasOwnProperty(iter22))
      {
        iter22 = this.newBackedUpCells[iter22];
        iter22.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.projectedPath !== null && this.projectedPath !== undefined) {
    output.writeFieldBegin('projectedPath', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRUCT, this.projectedPath.length);
    for (var iter23 in this.projectedPath)
    {
      if (this.projectedPath.hasOwnProperty(iter23))
      {
        iter23 = this.projectedPath[iter23];
        iter23.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

const IterationBundle = function(args) {
  this.iterations = null;
  this.bufferIsFlushed = null;
  if (args) {
    if (args.iterations !== undefined && args.iterations !== null) {
      this.iterations = Thrift.copyList(args.iterations, [Iteration]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field iterations is unset!');
    }
    if (args.bufferIsFlushed !== undefined && args.bufferIsFlushed !== null) {
      this.bufferIsFlushed = args.bufferIsFlushed;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bufferIsFlushed is unset!');
    }
  }
};
IterationBundle.prototype = {};
IterationBundle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.iterations = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new Iteration();
          elem30.read(input);
          this.iterations.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.bufferIsFlushed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IterationBundle.prototype.write = function(output) {
  output.writeStructBegin('IterationBundle');
  if (this.iterations !== null && this.iterations !== undefined) {
    output.writeFieldBegin('iterations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.iterations.length);
    for (var iter31 in this.iterations)
    {
      if (this.iterations.hasOwnProperty(iter31))
      {
        iter31 = this.iterations[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bufferIsFlushed !== null && this.bufferIsFlushed !== undefined) {
    output.writeFieldBegin('bufferIsFlushed', Thrift.Type.BOOL, 2);
    output.writeBool(this.bufferIsFlushed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

const Init = function(args) {
  this.width = null;
  this.height = null;
  this.start = null;
  this.goals = null;
  this.blockedCells = null;
  if (args) {
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field width is unset!');
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field height is unset!');
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = new Location(args.start);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start is unset!');
    }
    if (args.goals !== undefined && args.goals !== null) {
      this.goals = Thrift.copyList(args.goals, [Location]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field goals is unset!');
    }
    if (args.blockedCells !== undefined && args.blockedCells !== null) {
      this.blockedCells = Thrift.copyList(args.blockedCells, [Location]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field blockedCells is unset!');
    }
  }
};
Init.prototype = {};
Init.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.start = new Location();
        this.start.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.goals = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Location();
          elem38.read(input);
          this.goals.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size39 = 0;
        var _rtmp343;
        this.blockedCells = [];
        var _etype42 = 0;
        _rtmp343 = input.readSetBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new Location();
          elem45.read(input);
          this.blockedCells.push(elem45);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Init.prototype.write = function(output) {
  output.writeStructBegin('Init');
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 1);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 2);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.STRUCT, 3);
    this.start.write(output);
    output.writeFieldEnd();
  }
  if (this.goals !== null && this.goals !== undefined) {
    output.writeFieldBegin('goals', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.goals.length);
    for (var iter46 in this.goals)
    {
      if (this.goals.hasOwnProperty(iter46))
      {
        iter46 = this.goals[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.blockedCells !== null && this.blockedCells !== undefined) {
    output.writeFieldBegin('blockedCells', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRUCT, this.blockedCells.length);
    for (var iter47 in this.blockedCells)
    {
      if (this.blockedCells.hasOwnProperty(iter47))
      {
        iter47 = this.blockedCells[iter47];
        iter47.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

const NoDataException = function(args) {
};
Thrift.inherits(NoDataException, Thrift.TException);
NoDataException.prototype.name = 'NoDataException';
NoDataException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoDataException.prototype.write = function(output) {
  output.writeStructBegin('NoDataException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

export {Location, Iteration, IterationBundle, Init, NoDataException};